/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN PreferencesActionsGenerated.js PLEASE EDIT ../PreferencesActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import PreferencesApi from "../../../api/PreferencesApi";

let actionsFunction = {

  //CRUD METHODS

  // Create preferences
  createPreferences: function(preferences) {
    return function(dispatch) {
      return PreferencesApi
        .createPreferences(preferences)
        .then(preferences => {
          dispatch(actionsFunction.createPreferencesSuccess(preferences));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createPreferencesSuccess: function(preferences) {
    return { type: types.CREATE_PREFERENCES_SUCCESS, payload: preferences };
  },


  // Delete preferences
  deletePreferences: function(id) {
    return function(dispatch) {
      return PreferencesApi
        .deletePreferences(id)
        .then(preferences => {
          dispatch(actionsFunction.deletePreferencesSuccess(preferences));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deletePreferencesSuccess: function(preferences) {
    return { type: types.DELETE_PREFERENCES_SUCCESS, payload: preferences };
  },


  // Get preferences
  loadPreferences: function(id) {
    return function(dispatch) {
      return PreferencesApi
        .getOnePreferences(id)
        .then(preferences => {
          dispatch(actionsFunction.loadPreferencesSuccess(preferences));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadPreferencesSuccess: function(preferences) {
    return { type: types.GET_PREFERENCES_SUCCESS, payload: preferences };
  },

  // Load  list
  loadPreferencesList: function() {
    return function(dispatch) {
      return PreferencesApi
        .getPreferencesList()
        .then(list => {
          dispatch(actionsFunction.loadPreferencesListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadPreferencesListSuccess: function(list) {
    return { type: types.LIST_PREFERENCES_SUCCESS, payload: list };
  },

	
  // Save preferences
  savePreferences: function(preferences) {
    return function(dispatch) {
      return PreferencesApi
        .savePreferences(preferences)
        .then(preferences => {
          dispatch(actionsFunction.savePreferencesSuccess(preferences));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  savePreferencesSuccess: function(preferences) {
    return { type: types.UPDATE_PREFERENCES_SUCCESS, payload: preferences };
  },


};

export default actionsFunction;
