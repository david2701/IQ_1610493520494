openapi: 3.0.0
info:
  title: IQ
  description: You can obtain JWT token from login API
  version: 0.1
servers:
  - url: http://localhost:3000/api
    description: Local server for testing
paths:
  /login:
    post:
      summary: Login API
      security: []   # No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:   # Sample object
                username: admin
                password: 62f264d7ad826f02a8af714c0a54b197935b717656b80461686d450f7b3abde4c553541515de2052b9af70f710f0cd8a1a2d3f4d60aa72608d71a63a9a93c0f5
      responses:
        '200':
          description: OK
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /verifyToken:
    post:
      summary: Verify token API
      security: [] #No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /changePassword:
    post:
      summary: Change password API
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordOld:
                  type: string
      responses:
        '200':
          description: OK
                

  #-----  League  -----
  /league/:
    post:
      summary: CRUD ACTION create
      tags:
        - League
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/League"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                country:
                  type: string
                league_id:
                  type: integer
                name:
                  type: string
                season:
                  type: integer
                team_id:
                  type: integer
    get:
      summary: CRUD ACTION list
      tags:
        - League
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/League"
    
  /league/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - League
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - League
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/League"
    post:
      summary: CRUD ACTION update
      tags:
        - League
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/League"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/League"
    
  #-----  Matches  -----
  /matches/:
    post:
      summary: CRUD ACTION create
      tags:
        - Matches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Matches"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                away_team:
                  type: string
                home_team:
                  type: string
                league_id:
                  type: integer
                match_id:
                  type: integer
                match_start:
                  type: string
                status:
                  type: integer
                status_code:
                  type: integer
    get:
      summary: CRUD ACTION list
      tags:
        - Matches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Matches"
    
  /matches/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Matches
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Matches
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Matches"
    post:
      summary: CRUD ACTION update
      tags:
        - Matches
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Matches"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Matches"
    
  #-----  Players  -----
  /players/:
    post:
      summary: CRUD ACTION create
      tags:
        - Players
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Players"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Age:
                  type: number
                Equip:
                  type: string
                Height:
                  type: number
                Name:
                  type: string
                Number:
                  type: number
                Position:
                  type: string
                Weight:
                  type: number
    get:
      summary: CRUD ACTION list
      tags:
        - Players
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Players"
    
  /players/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Players
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Players
      parameters:
        - name: id
          in: path
          description: Id Players
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Players"
    post:
      summary: CRUD ACTION update
      tags:
        - Players
      parameters:
        - name: id
          in: path
          description: Id Players
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Players"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Players"
    
  /players/findByName/{key}:
    get:
      summary: CRUD ACTION findByName
      tags:
        - Players
      parameters:
        - name: key
          in: path
          description: Id of the resource Name to search
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Players"
    
  #-----  Preferences  -----
  /preferences/:
    post:
      summary: CRUD ACTION create
      tags:
        - Preferences
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preferences"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                positions:
                  type: object
                score:
                  type: number
                team_id:
                  type: integer
                user_id:
                  type: integer
    get:
      summary: CRUD ACTION list
      tags:
        - Preferences
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Preferences"
    
  /preferences/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Preferences
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Preferences
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preferences"
    post:
      summary: CRUD ACTION update
      tags:
        - Preferences
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preferences"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Preferences"
    
  #-----  Teams  -----
  /teams/:
    post:
      summary: CRUD ACTION create
      tags:
        - Teams
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teams"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                color1:
                  type: string
                color2:
                  type: string
                country:
                  type: string
                founded:
                  type: string
                logo:
                  type: string
                name:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - Teams
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teams"
    
  /teams/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Teams
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Teams
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teams"
    post:
      summary: CRUD ACTION update
      tags:
        - Teams
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teams"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Teams"
    
  /teams/findByname/{key}:
    get:
      summary: CRUD ACTION findByname
      tags:
        - Teams
      parameters:
        - name: key
          in: path
          description: Id of the resource name to search
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teams"
    
  #-----  User  -----
  /user/{id}/changePassword:
    post:
      summary: Change password of user from admin
      tags:
        - User
      responses:
        "200":
          description: OK
    
  /user/:
    post:
      summary: CRUD ACTION create
      tags:
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                password:
                  type: string
                roles:
                  type: string
                surname:
                  type: string
                username:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    
  /user/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      summary: CRUD ACTION update
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    
    
  #-----  User  -----
  /Users/{id}/changePassword:
    post:
      summary: Change password by admin API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordAdmin:
                  type: string
      responses:
        '200':
          description: OK
  /Users/{id}:
    post:
      summary: Update User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    delete:
      summary: Delete User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /Users:
    post:
      summary: Create User API
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: 'string'
                password: 
                  type: 'string'
                mail: 
                  type: 'string'
                name: 
                  type: 'string'
                surname: 
                  type: 'string'
                roles: 
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    
# JWT security
security:
  - bearerAuth: [] 
  
  
# Components
components:

  # Security
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  # Data Model
  schemas:
    User:
      properties:
        username:
          type: 'string'
        password: 
          type: 'string'
        mail: 
          type: 'string'
        name: 
          type: 'string'
        surname: 
          type: 'string'
        roles: 
          type: array
          items:
            type: string
      required:
        - username
        - password
        

    League:
      properties:
        _id:
          type: string
        country:
          type: string
        league_id:
          type: integer
        name:
          type: string
        season:
          type: integer
        team_id:
          type: integer
      required:
        -  _id
        - country
        - league_id
        - name
        - season
        - team_id
      
    
    Matches:
      properties:
        _id:
          type: string
        away_team:
          type: string
        home_team:
          type: string
        league_id:
          type: integer
        match_id:
          type: integer
        match_start:
          type: string
        status:
          type: integer
        status_code:
          type: integer
      required:
        -  _id
      
    
    Players:
      properties:
        _id:
          type: string
        Age:
          type: number
        Equip:
          type: string
        Height:
          type: number
        Name:
          type: string
        Number:
          type: number
        Position:
          type: string
        Weight:
          type: number
      required:
        -  _id
        - Age
        - Equip
        - Height
        - Name
        - Number
        - Position
        - Weight
      
    
    Preferences:
      properties:
        _id:
          type: string
        positions:
          type: object
        score:
          type: number
        team_id:
          type: integer
        user_id:
          type: integer
      required:
        -  _id
        - positions
        - score
        - team_id
        - user_id
      
    
    Teams:
      properties:
        _id:
          type: string
        color1:
          type: string
        color2:
          type: string
        country:
          type: string
        founded:
          type: string
        logo:
          type: string
        name:
          type: string
      required:
        -  _id
        - color1
        - color2
        - country
        - logo
        - name
      
    
    User:
      properties:
        _id:
          type: string
        email:
          type: string
        name:
          type: string
        password:
          type: string
        roles:
          type: string
        surname:
          type: string
        username:
          type: string
      required:
        -  _id
        - password
        - username
      
    
